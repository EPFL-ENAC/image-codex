/* tslint:disable */
/* eslint-disable */
/**
 * Image Codex
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiFile
 */
export interface ApiFile {
    /**
     * 
     * @type {string}
     * @memberof ApiFile
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiFile
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiFile
     */
    base64: string;
}
/**
 * 
 * @export
 * @interface ComposedImage
 */
export interface ComposedImage {
    /**
     * 
     * @type {string}
     * @memberof ComposedImage
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ComposedImage
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof ComposedImage
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof ComposedImage
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof ComposedImage
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof ComposedImage
     */
    height: number;
}
/**
 * 
 * @export
 * @interface Composition
 */
export interface Composition {
    /**
     * 
     * @type {string}
     * @memberof Composition
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Composition
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof Composition
     */
    height: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof Composition
     */
    background_color?: Array<number>;
    /**
     * 
     * @type {Array<ComposedImage>}
     * @memberof Composition
     */
    images: Array<ComposedImage>;
}
/**
 * 
 * @export
 * @interface CursorPageTaggedImage
 */
export interface CursorPageTaggedImage {
    /**
     * 
     * @type {Array<TaggedImage>}
     * @memberof CursorPageTaggedImage
     */
    items: Array<TaggedImage>;
    /**
     * 
     * @type {number}
     * @memberof CursorPageTaggedImage
     */
    total: number;
    /**
     * 
     * @type {string}
     * @memberof CursorPageTaggedImage
     */
    next?: string;
    /**
     * 
     * @type {number}
     * @memberof CursorPageTaggedImage
     */
    size: number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface TaggedImage
 */
export interface TaggedImage {
    /**
     * 
     * @type {string}
     * @memberof TaggedImage
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof TaggedImage
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TaggedImage
     */
    url: string;
    /**
     * 
     * @type {number}
     * @memberof TaggedImage
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof TaggedImage
     */
    height: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TaggedImage
     */
    tags: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TaggedImage
     */
    author: string;
    /**
     * 
     * @type {string}
     * @memberof TaggedImage
     */
    license: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * CompositionsApi - axios parameter creator
 * @export
 */
export const CompositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an image composition and return it in the given type
         * @summary Create Composition
         * @param {Composition} composition 
         * @param {string} [mimetype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompositionCompositionsPost: async (composition: Composition, mimetype?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'composition' is not null or undefined
            assertParamExists('createCompositionCompositionsPost', 'composition', composition)
            const localVarPath = `/compositions/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mimetype !== undefined) {
                localVarQueryParameter['mimetype'] = mimetype;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(composition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompositionsApi - functional programming interface
 * @export
 */
export const CompositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an image composition and return it in the given type
         * @summary Create Composition
         * @param {Composition} composition 
         * @param {string} [mimetype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCompositionCompositionsPost(composition: Composition, mimetype?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCompositionCompositionsPost(composition, mimetype, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompositionsApi - factory interface
 * @export
 */
export const CompositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompositionsApiFp(configuration)
    return {
        /**
         * Create an image composition and return it in the given type
         * @summary Create Composition
         * @param {Composition} composition 
         * @param {string} [mimetype] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompositionCompositionsPost(composition: Composition, mimetype?: string, options?: any): AxiosPromise<ApiFile> {
            return localVarFp.createCompositionCompositionsPost(composition, mimetype, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompositionsApi - object-oriented interface
 * @export
 * @class CompositionsApi
 * @extends {BaseAPI}
 */
export class CompositionsApi extends BaseAPI {
    /**
     * Create an image composition and return it in the given type
     * @summary Create Composition
     * @param {Composition} composition 
     * @param {string} [mimetype] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompositionsApi
     */
    public createCompositionCompositionsPost(composition: Composition, mimetype?: string, options?: any) {
        return CompositionsApiFp(this.configuration).createCompositionCompositionsPost(composition, mimetype, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: any) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload a new image to the database
         * @summary Create Image
         * @param {ApiFile} apiFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageImagesPost: async (apiFile: ApiFile, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiFile' is not null or undefined
            assertParamExists('createImageImagesPost', 'apiFile', apiFile)
            const localVarPath = `/images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiFile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete images with given comma-separated ids
         * @summary Delete Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImagesImagesImageIdsDelete: async (imageIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageIds' is not null or undefined
            assertParamExists('deleteImagesImagesImageIdsDelete', 'imageIds', imageIds)
            const localVarPath = `/images/{image_ids}`
                .replace(`{${"image_ids"}}`, encodeURIComponent(String(imageIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get images with filters: - **tags**: contains all given tags - **author**: has given author
         * @summary Get All Images
         * @param {Array<string>} [tags] 
         * @param {string} [author] 
         * @param {string} [next] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesImagesGet: async (tags?: Array<string>, author?: string, next?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/images/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get images with given comma-separated ids
         * @summary Get Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesImagesImageIdsGet: async (imageIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageIds' is not null or undefined
            assertParamExists('getImagesImagesImageIdsGet', 'imageIds', imageIds)
            const localVarPath = `/images/{image_ids}`
                .replace(`{${"image_ids"}}`, encodeURIComponent(String(imageIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload a new image to the database
         * @summary Create Image
         * @param {ApiFile} apiFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createImageImagesPost(apiFile: ApiFile, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createImageImagesPost(apiFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete images with given comma-separated ids
         * @summary Delete Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImagesImagesImageIdsDelete(imageIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImagesImagesImageIdsDelete(imageIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get images with filters: - **tags**: contains all given tags - **author**: has given author
         * @summary Get All Images
         * @param {Array<string>} [tags] 
         * @param {string} [author] 
         * @param {string} [next] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllImagesImagesGet(tags?: Array<string>, author?: string, next?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CursorPageTaggedImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllImagesImagesGet(tags, author, next, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get images with given comma-separated ids
         * @summary Get Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesImagesImageIdsGet(imageIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaggedImage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImagesImagesImageIdsGet(imageIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * Upload a new image to the database
         * @summary Create Image
         * @param {ApiFile} apiFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageImagesPost(apiFile: ApiFile, options?: any): AxiosPromise<any> {
            return localVarFp.createImageImagesPost(apiFile, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete images with given comma-separated ids
         * @summary Delete Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImagesImagesImageIdsDelete(imageIds: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteImagesImagesImageIdsDelete(imageIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get images with filters: - **tags**: contains all given tags - **author**: has given author
         * @summary Get All Images
         * @param {Array<string>} [tags] 
         * @param {string} [author] 
         * @param {string} [next] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesImagesGet(tags?: Array<string>, author?: string, next?: string, size?: number, options?: any): AxiosPromise<CursorPageTaggedImage> {
            return localVarFp.getAllImagesImagesGet(tags, author, next, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get images with given comma-separated ids
         * @summary Get Images
         * @param {string} imageIds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesImagesImageIdsGet(imageIds: string, options?: any): AxiosPromise<Array<TaggedImage>> {
            return localVarFp.getImagesImagesImageIdsGet(imageIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * Upload a new image to the database
     * @summary Create Image
     * @param {ApiFile} apiFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public createImageImagesPost(apiFile: ApiFile, options?: any) {
        return ImagesApiFp(this.configuration).createImageImagesPost(apiFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete images with given comma-separated ids
     * @summary Delete Images
     * @param {string} imageIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public deleteImagesImagesImageIdsDelete(imageIds: string, options?: any) {
        return ImagesApiFp(this.configuration).deleteImagesImagesImageIdsDelete(imageIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get images with filters: - **tags**: contains all given tags - **author**: has given author
     * @summary Get All Images
     * @param {Array<string>} [tags] 
     * @param {string} [author] 
     * @param {string} [next] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getAllImagesImagesGet(tags?: Array<string>, author?: string, next?: string, size?: number, options?: any) {
        return ImagesApiFp(this.configuration).getAllImagesImagesGet(tags, author, next, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get images with given comma-separated ids
     * @summary Get Images
     * @param {string} imageIds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getImagesImagesImageIdsGet(imageIds: string, options?: any) {
        return ImagesApiFp(this.configuration).getImagesImagesImageIdsGet(imageIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all tags
         * @summary Get Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsTagsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all tags
         * @summary Get Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsTagsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsTagsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * Get all tags
         * @summary Get Tags
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsTagsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getTagsTagsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Get all tags
     * @summary Get Tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTagsTagsGet(options?: any) {
        return TagsApiFp(this.configuration).getTagsTagsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


